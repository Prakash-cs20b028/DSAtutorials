int findDuplicate(vector<int>& nums) {
        int n = nums.size();
        int res = 0;
        sort(nums.begin(),nums.end());
        for(int i = 0;i<n-1;i++)
        {
            if(nums[i] == nums[i+1])
            {
                res = nums[i];
                break;
            }
            
        }
        return res;
    }
    
    
    
We can use binary search concept to solve it in n.logn time.

int findDuplicate(int* nums, int numsSize){
    int low = 0;
    int high = numsSize-1;
    int count;
    while(low <= high)
    {   count = 0;
        int mid = (high + low)/2;
        for(int i = 0;i<numsSize;i++)
        {
            if(nums[i] <= mid)
            {
                count++;
            }
        }
        if(count <= mid)
        {
            low = mid+1;
        }
        else
        {
            high = mid-1;
        }
        
    }
    return low;
}
